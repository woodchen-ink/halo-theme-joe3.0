name: Build distribution theme

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Auto-update version
        run: |
          # Get current version
          CURRENT_VERSION=$(sed -nE 's/^ *version: "([^"]+)"$/\1/p' theme.yaml)
          echo "Current version: $CURRENT_VERSION"
          
          # Generate new version based on timestamp
          NEW_VERSION="$(date +'%Y.%m.%d')-$(date +'%H%M')"
          echo "New version: $NEW_VERSION"
          
          # Update theme.yaml
          sed -i "s/version: '[^']*'/version: '$NEW_VERSION'/" theme.yaml
          
          # Update package.json if exists
          if [ -f package.json ]; then
            sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" package.json
          fi
          
          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add theme.yaml package.json
          git commit -m "Auto-update version to $NEW_VERSION" || echo "No changes to commit"
          git push || echo "No changes to push"
          
          echo "PACKAGE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      - name: Install dependencies and build
        run: |
          npm install
          npm run build
      - name: Compress zip
        run: |
          PRE_ZIP_FOLDER=halo-theme-Joe3-${PACKAGE_VERSION}
          ARTIFACT_NAME=${PRE_ZIP_FOLDER}.zip
          ARTIFACT_PATHNAME=dist/${ARTIFACT_NAME}
          echo "halo-theme-Joe3 version $PACKAGE_VERSION"
          echo "Artifact name: ${ARTIFACT_NAME}"
          echo "Artifact pathname: ${ARTIFACT_PATHNAME}"
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
          echo "ARTIFACT_PATHNAME=${ARTIFACT_PATHNAME}" >> $GITHUB_ENV
          mkdir $PRE_ZIP_FOLDER
          mkdir dist
          cp -r theme.yaml settings.yaml annotation-setting.yaml templates $PRE_ZIP_FOLDER/
          zip -r $ARTIFACT_PATHNAME $PRE_ZIP_FOLDER
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: halo-theme-Joe3
          path: |
            dist/*.zip
          retention-days: 7
      - name: Create Release
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;
            const packageVersion = process.env.PACKAGE_VERSION;
            const artifactPathName = process.env.ARTIFACT_PATHNAME;
            const artifactName = process.env.ARTIFACT_NAME;
            
            console.log('Creating release for version:', packageVersion);
            
            try {
              // Create a new release
              const release = await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: `v${packageVersion}`,
                name: `Release v${packageVersion}`,
                body: `🎉 Auto-generated release for version ${packageVersion}\n\n## 更新内容\n- 自动构建和打包\n- 版本号: ${packageVersion}\n- 构建时间: ${new Date().toLocaleString('zh-CN', {timeZone: 'Asia/Shanghai'})}\n\n## 下载\n下载 ${artifactName} 文件并在 Halo 后台上传安装。`,
                draft: false,
                prerelease: false
              });
              
              console.log('Release created:', release.data.id);
              
              // Upload the asset
              await github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: release.data.id,
                name: artifactName,
                data: await fs.readFile(artifactPathName)
              });
              
              console.log('Asset uploaded successfully');
              console.log('Release URL:', release.data.html_url);
              
              // Clean up old releases, keep only the latest 3
              await cleanupOldReleases();
            } catch (error) {
              console.error('Error creating release:', error);
              // If release already exists, try to update it
              if (error.status === 422) {
                console.log('Release may already exist, trying to find and update...');
                try {
                  const existingRelease = await github.rest.repos.getReleaseByTag({
                    owner,
                    repo,
                    tag: `v${packageVersion}`
                  });
                  console.log('Found existing release, updating assets...');
                  
                  // Upload the asset to existing release
                  await github.rest.repos.uploadReleaseAsset({
                    owner,
                    repo,
                    release_id: existingRelease.data.id,
                    name: artifactName,
                    data: await fs.readFile(artifactPathName)
                  });
                  
                  console.log('Asset updated successfully');
                  
                  // Clean up old releases, keep only the latest 3
                  await cleanupOldReleases();
                } catch (updateError) {
                  console.error('Error updating existing release:', updateError);
                  throw updateError;
                }
              } else {
                throw error;
              }
            }
            
            // Function to clean up old releases
            async function cleanupOldReleases() {
              try {
                console.log('Starting cleanup of old releases...');
                
                // Get all releases
                const releases = await github.rest.repos.listReleases({
                  owner,
                  repo,
                  per_page: 100
                });
                
                // Sort releases by creation date (newest first)
                const sortedReleases = releases.data.sort((a, b) => 
                  new Date(b.created_at) - new Date(a.created_at)
                );
                
                console.log(`Found ${sortedReleases.length} total releases`);
                
                // Keep only the latest 3, delete the rest
                const releasesToDelete = sortedReleases.slice(3);
                
                if (releasesToDelete.length === 0) {
                  console.log('No old releases to delete');
                  return;
                }
                
                console.log(`Deleting ${releasesToDelete.length} old releases...`);
                
                for (const release of releasesToDelete) {
                  try {
                    console.log(`Deleting release: ${release.tag_name} (${release.name})`);
                    
                    // Delete the release
                    await github.rest.repos.deleteRelease({
                      owner,
                      repo,
                      release_id: release.id
                    });
                    
                    // Delete the associated tag
                    await github.rest.git.deleteRef({
                      owner,
                      repo,
                      ref: `tags/${release.tag_name}`
                    });
                    
                    console.log(`Successfully deleted release: ${release.tag_name}`);
                  } catch (deleteError) {
                    console.error(`Error deleting release ${release.tag_name}:`, deleteError);
                    // Continue with other releases even if one fails
                  }
                }
                
                console.log('Cleanup completed');
              } catch (cleanupError) {
                console.error('Error during cleanup:', cleanupError);
                // Don't fail the entire workflow if cleanup fails
              }
            }
